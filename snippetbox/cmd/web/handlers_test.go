package main

import (
	"bytes"
	"fmt"
	"io"
	"net/http"
	"net/http/httptest"
	"snippetbox.audryhsu.com/internal/assert"
	"testing"
)

func TestSnippetView(t *testing.T) {
	// test that GET requests to "/snippet/view/1" return 200 ok and req body contains expected content
	// GET requests to any other route return 404 not found
	app := newTestApplication(t)
	ts := newTestServer(t, app.routes())
	defer ts.Close()

	url := urlFormatter("/snippet/view")

	tests := []struct {
		name     string
		urlPath  string
		wantCode int
		wantBody string
	}{
		{
			name:     "Valid ID",
			urlPath:  url("1"),
			wantCode: http.StatusOK,
			wantBody: "An old silent pond...",
		},
		{
			name:     "Non-existent ID",
			urlPath:  url("509"),
			wantCode: http.StatusNotFound,
		},
		{
			name:     "Negative ID",
			urlPath:  url("-1"),
			wantCode: http.StatusNotFound,
		},
		{
			name:     "String ID",
			urlPath:  url("foo"),
			wantCode: http.StatusNotFound,
		},
		{
			name:     "empty id",
			urlPath:  url(""),
			wantCode: http.StatusNotFound,
		},
	}

	for _, c := range tests {
		t.Run(c.name, func(t *testing.T) {
			code, _, body := ts.get(t, c.urlPath)
			assert.Equal(t, code, c.wantCode)
			if c.wantBody != "" {
				mockSnippet, _ := app.snippets.Get(1)
				assert.StringContains(t, body, mockSnippet.Content)
			}
		})
	}
}

func urlFormatter(baseURL string) func(string) string {
	return func(param string) string {
		return fmt.Sprintf("%s/%s", baseURL, param)
	}
}

// end to end testing that uses testutils package for set up
func TestPing(t *testing.T) {
	// create new instance of app struct for testing
	app := newTestApplication(t)
	ts := newTestServer(t, app.routes())
	defer ts.Close()

	statusCode, _, body := ts.get(t, "/ping")
	// assert against returned http.Response instead of a http.ResponseRecorder
	assert.Equal(t, statusCode, http.StatusOK)
	assert.Equal(t, body, "OK")

}

// initial unit test
func TestPing_UnitTest(t *testing.T) {
	rr := httptest.NewRecorder()

	// initialize dummy http.Request (from a client)
	r, err := http.NewRequest(http.MethodGet, "/", nil)
	if err != nil {
		t.Fatal(err)
	}
	// pass in httptest.ResponseRecorder instead of http.ResponseWriter, and dummy request
	ping(rr, r)

	// Result() method gets the http.Response generated by the handler
	res := rr.Result()

	// Check that status code written by handler was 200
	assert.Equal(t, res.StatusCode, http.StatusOK)

	// check response body written by handler equals "OK"
	defer res.Body.Close()
	body, err := io.ReadAll(res.Body)
	if err != nil {
		t.Fatal(err)
	}
	bytes.TrimSpace(body)
	assert.Equal(t, string(body), "OK")

}
